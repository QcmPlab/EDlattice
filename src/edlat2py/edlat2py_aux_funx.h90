!ED_AUX_FUNX:
subroutine search_variable(var,ntmp,converged)
  USE EDIPACK, only: ed_search_variable
  implicit none
  real(8),intent(inout) :: var
  real(8),intent(in)    :: ntmp
  logical,intent(out)   :: converged
  logical               :: bool
  call ed_search_variable(var,ntmp,bool)
  converged=bool
end subroutine search_variable




!AUX:
subroutine check_convergence(Xnew,eps,N1,N2,oerr,convergence)
  USE SCIFOR
  implicit none
  complex(8),intent(in)           :: Xnew(:)
  real(8),intent(in)              :: eps
  integer,intent(in)              :: N1,N2
  real(8),intent(out)             :: oerr
  logical,intent(out)             :: convergence  
  integer                         :: i,j,Msum
  real(8)                         :: err
  real(8)                         :: M,S
  complex(8),save,allocatable     :: Xold(:)
  integer,save                    :: success=0,check=1
  character(len=100)              :: file_
  file_='error.err'
  Msum=size(Xnew)
  if(.not.allocated(Xold))then
     allocate(Xold(Msum))
     Xold=0.d0
  endif
  S=0.d0 ; M=0.d0
  do i=1,Msum
     M=M + abs(Xnew(i)-Xold(i))
     S=S + abs(Xnew(i))
  enddo
  err= M/S
  Xold=Xnew
  open(10,file=reg(file_),position="append")
  write(10,"(I5,ES15.7)")check,err
  close(10)
  if(err < eps)then
     success=success+1
  else
     success=0
  endif
  convergence=.false.
  if(success > N1)convergence=.true.
  if(check>=N2)then
     open(10,file="ERROR.README")
     write(10,*)""
     close(10)
     write(*,"(A,I4,A)")"Not converged after",N2," iterations."
  endif
  if(convergence)then
     write(*,"(A,ES15.7)")bold_green("error="),err
  else
     if(err < eps)then
        write(*,"(A,ES15.7)")bold_yellow("error="),err
     else
        write(*,"(A,ES15.7)")bold_red("error="),err
     endif
  endif
  oerr=err
  check=check+1
end subroutine check_convergence





